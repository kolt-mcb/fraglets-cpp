# sequential version of sort based on [min] function:
# take the min, move it to ordered list, take the next min, and so on.
#
# [sort ltlist>] --> [sorted ltlist>]
#

 [sorted]
 [matchp sort empty finish continue]
 [matchp continue split remain * getmin]

# "remain" list becomes new list to be sorted, and [min N] is appended to
# sorted list

 [matchp min split match remain sort * split match sorted match tosorted sorted * tosorted]

# this is the [getmin] function as in the fraglets tutorial, except
# that now it stores the non-min numbers in the "remain" list

 [matchp getmin length len1]
 [matchp len1 lt getmin2 min2 1]

 [matchp min2 pop d1]
 [matchp d1 pop min]

 [matchp getmin2 pop d11]
 [matchp d11 pop getmin3]

 [matchp getmin3 lt islt nlt]
 [matchp nlt pop2 r1 getmin]
 [matchp islt exch nlt]

# store non-min values in "remain" list, to be sorted later
 [matchp r1 match remain remain]

# test:

 [sort -200, -684, 408, 716, 780, -22, -433, 15, 689, 563, 739, 192, 558, 323, 506, 328, -833, 744, -269, 47, 3, 234, -219, -176, -21, 54, 793, -395, 307, -282, 906, 942, -170, 716, 174, -761, 414, 577, 879, 416, -970, 21, -581, -816, 596, 697, -922, 480, -440, -27, -132, 866, -86, 801, 114, 7, -471, 201, -41, 976, 245, -581, -83, 594, -233, -267, 507, 216, 381, -992, 14, 39, 132, -796, -495, 480, 382, -556, -68, -819, 42, -844, -863, -540, -958, 246, -858, -378, -537, -755, -580, 487, -705, -497, 533, 811, -430, -754, -188, 385]

# [pop2 pop2 pop2]